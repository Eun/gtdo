// +build ignore

package main

import (
	"go/build"
	"go/format"
	"go/parser"
	"go/token"
	"io"
	"os"
	"path/filepath"

	"golang.org/x/tools/astutil"
)

// Copy source of sourcegraph.com/sourcegraph/vcsstore/cmd/vcsstore,
// but use gitcmd backend instead of native git one.
func main() {
	bpkg, err := build.Import("sourcegraph.com/sourcegraph/vcsstore/cmd/vcsstore", "", build.ImportComment)
	if err != nil {
		panic(err)
	}

	if len(bpkg.GoFiles) != 1 {
		panic("len(bpkg.GoFiles) != 1")
	}

	filename := filepath.Join(bpkg.Dir, bpkg.GoFiles[0])

	fset := token.NewFileSet()
	astFile, err := parser.ParseFile(fset, filename, nil, parser.ParseComments)
	if err != nil {
		panic(err)
	}

	rewrote := astutil.RewriteImport(fset, astFile, "sourcegraph.com/sourcegraph/go-vcs/vcs/git", "sourcegraph.com/sourcegraph/go-vcs/vcs/gitcmd")
	if !rewrote {
		panic("!rewrote")
	}

	f, err := os.OpenFile("./main.go", os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0644)
	if err != nil {
		panic(err)
	}
	defer f.Close()

	_, err = io.WriteString(f, "// generated by go generate; DO NOT EDIT\n\n")
	if err != nil {
		panic(err)
	}

	err = format.Node(f, fset, astFile)
	if err != nil {
		panic(err)
	}
}
